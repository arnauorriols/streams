const streams=require("../node/iota_streams_wasm"),fetch=require("node-fetch");async function main(){let e="https://chrysalis-nodes.iota.org/",o=new streams.SendOptions(e,!0),t=F(81),n=new streams.Author(t,o.clone(),streams.ChannelType.SingleBranch);console.log("channel address: ",n.channel_address()),console.log("multi branching: ",n.is_multi_branching());let s=await n.clone().send_announce(),l=s.get_link();console.log("announced at: ",l.to_string());let a=await n.clone().get_client().get_link_details(l.copy());console.log("Announce message id: "+a.get_metadata().message_id);let c=F(81),g=new streams.Subscriber(c,o.clone()),r=l.copy();await g.clone().receive_announcement(r);let i=g.author_public_key();console.log("Channel registered by subscriber, author's public key: ",i);let _=g.fetch_state();console.log("Subscribing..."),r=l.copy(),s=await g.clone().send_subscribe(r);let d=s.get_link();console.log("Subscription message at: ",d.to_string()),await n.clone().receive_subscribe(d),console.log("Subscription processed"),console.log("Sending Keyload"),s=await n.clone().send_keyload_for_everyone(l);let h=s.get_link();console.log("Keyload message at: ",h.to_string()),console.log("Subscriber syncing..."),await g.clone().sync_state();let u=M("Public"),m=M("Masked");console.log("Subscriber Sending tagged packet"),s=await g.clone().send_tagged_packet(h,u,m);let b=s.get_link();console.log("Tag packet at: ",b.to_string());let p=b;console.log("Subscriber Sending multiple signed packets");for(var f=0;f<10;f++)s=await g.clone().send_signed_packet(p,u,m),p=s.get_link(),console.log("Signed packet at: ",p.to_string());console.log("\nAuthor fetching next messages");let k=!0;for(;k;){let e=await n.clone().fetch_next_msgs();0===e.length&&(k=!1);for(var w=0;w<e.length;w++)console.log("Found a message..."),console.log("Public: ",R(e[w].get_message().get_public_payload()),"\tMasked: ",R(e[w].get_message().get_masked_payload()))}console.log("\nSubscriber resetting state"),g.clone().reset_state();let y=g.fetch_state();var S=!0;for(w=0;w<y.length;w++)_[w].get_link().to_string()==y[w].get_link().to_string()&&_[w].get_seq_no()==y[w].get_seq_no()&&_[w].get_branch_no()==y[w].get_branch_no()||(S=!1);S?console.log("States match"):console.log("States do not match"),console.log("\nAuthor fetching prev messages");let v=await n.clone().fetch_prev_msgs(p,3);for(var q=0;q<v.length;q++)console.log("Found a message at ",v[q].get_link().to_string());let A="password",C=n.clone().export(A),x=new streams.Client(e,o.clone());function M(e){for(var o=[],t=0;t<e.length;++t)o.push(e.charCodeAt(t));return o}function R(e){for(var o="",t=0;t<e.length;++t)o+=String.fromCharCode(e[t]);return o}function F(e){const o="abcdefghijklmnopqrstuvwxyz";let t="";for(w=9;w<e;w++)t+=o[Math.floor(Math.random()*o.length)];return t}streams.Author.import(x,C,A).channel_address!==n.channel_address?console.log("import failed"):console.log("import succesfull")}global.fetch=fetch,global.Headers=fetch.Headers,global.Request=fetch.Request,global.Response=fetch.Response,streams.set_panic_hook(),main().then((()=>{console.log("Done example")})).catch((e=>{console.log(e)}));