/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function set_panic_hook(): void;
export function __wbg_subscriber_free(a: number): void;
export function subscriber_new(a: number, b: number, c: number): number;
export function subscriber_from_client(a: number, b: number, c: number): number;
export function subscriber_import(a: number, b: number, c: number, d: number, e: number): number;
export function subscriber_clone(a: number): number;
export function subscriber_channel_address(a: number, b: number): void;
export function subscriber_get_client(a: number): number;
export function subscriber_is_multi_branching(a: number): number;
export function subscriber_store_psk(a: number, b: number, c: number, d: number): void;
export function subscriber_get_public_key(a: number, b: number): void;
export function subscriber_author_public_key(a: number, b: number): void;
export function subscriber_is_registered(a: number): number;
export function subscriber_unregister(a: number): void;
export function subscriber_export(a: number, b: number, c: number, d: number): void;
export function subscriber_receive_announcement(a: number, b: number): number;
export function subscriber_receive_keyload(a: number, b: number): number;
export function subscriber_receive_tagged_packet(a: number, b: number): number;
export function subscriber_receive_signed_packet(a: number, b: number): number;
export function subscriber_receive_sequence(a: number, b: number): number;
export function subscriber_receive_msg(a: number, b: number): number;
export function subscriber_receive_msg_by_sequence_number(a: number, b: number, c: number): number;
export function subscriber_send_subscribe(a: number, b: number): number;
export function subscriber_send_tagged_packet(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function subscriber_send_signed_packet(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function subscriber_syncState(a: number): number;
export function subscriber_fetchNextMsgs(a: number): number;
export function subscriber_fetchNextMsg(a: number): number;
export function subscriber_fetch_prev_msg(a: number, b: number): number;
export function subscriber_fetch_prev_msgs(a: number, b: number, c: number): number;
export function subscriber_genNextMsgAddresses(a: number): number;
export function subscriber_fetch_state(a: number): number;
export function subscriber_reset_state(a: number): void;
export function __wbg_author_free(a: number): void;
export function author_new(a: number, b: number, c: number, d: number): number;
export function author_from_client(a: number, b: number, c: number, d: number): number;
export function author_import(a: number, b: number, c: number, d: number, e: number): number;
export function author_export(a: number, b: number, c: number, d: number): void;
export function author_clone(a: number): number;
export function author_channel_address(a: number, b: number): void;
export function author_is_multi_branching(a: number): number;
export function author_get_client(a: number): number;
export function author_store_psk(a: number, b: number, c: number, d: number): void;
export function author_get_public_key(a: number, b: number): void;
export function author_send_announce(a: number): number;
export function author_send_keyload_for_everyone(a: number, b: number): number;
export function author_send_keyload(a: number, b: number, c: number, d: number): number;
export function author_send_tagged_packet(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function author_send_signed_packet(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function author_receive_subscribe(a: number, b: number): number;
export function author_receive_tagged_packet(a: number, b: number): number;
export function author_receive_signed_packet(a: number, b: number): number;
export function author_receive_sequence(a: number, b: number): number;
export function author_receive_msg(a: number, b: number): number;
export function author_receive_msg_by_sequence_number(a: number, b: number, c: number): number;
export function author_syncState(a: number): number;
export function author_fetchNextMsgs(a: number): number;
export function author_fetchNextMsg(a: number): number;
export function author_fetch_prev_msg(a: number, b: number): number;
export function author_fetch_prev_msgs(a: number, b: number, c: number): number;
export function author_genNextMsgAddresses(a: number): number;
export function author_fetch_state(a: number): number;
export function __wbg_sendoptions_free(a: number): void;
export function __wbg_get_sendoptions_local_pow(a: number): number;
export function __wbg_set_sendoptions_local_pow(a: number, b: number): void;
export function sendoptions_new(a: number, b: number, c: number): number;
export function sendoptions_set_url(a: number, b: number, c: number): void;
export function sendoptions_url(a: number, b: number): void;
export function sendoptions_clone(a: number): number;
export function __wbg_address_free(a: number): void;
export function address_new(a: number, b: number): number;
export function address_channelAddress(a: number): number;
export function address_msgId(a: number): number;
export function address_toMsgIndex(a: number, b: number): void;
export function address_toMsgIndexHex(a: number, b: number): void;
export function address_toString(a: number, b: number): void;
export function address_parse(a: number, b: number): number;
export function address_copy(a: number): number;
export function __wbg_channeladdress_free(a: number): void;
export function channeladdress_bytes(a: number, b: number): void;
export function channeladdress_hex(a: number, b: number): void;
export function channeladdress_toString(a: number, b: number): void;
export function channeladdress_parse(a: number, b: number): number;
export function channeladdress_copy(a: number): number;
export function __wbg_msgid_free(a: number): void;
export function msgid_bytes(a: number, b: number): void;
export function msgid_hex(a: number, b: number): void;
export function msgid_toString(a: number, b: number): void;
export function msgid_parse(a: number, b: number): number;
export function msgid_copy(a: number): number;
export function __wbg_userresponse_free(a: number): void;
export function __wbg_nextmsgaddress_free(a: number): void;
export function __wbg_get_nextmsgaddress_identifier(a: number, b: number): void;
export function __wbg_set_nextmsgaddress_identifier(a: number, b: number, c: number): void;
export function __wbg_get_nextmsgaddress_address(a: number): number;
export function __wbg_set_nextmsgaddress_address(a: number, b: number): void;
export function __wbg_userstate_free(a: number): void;
export function __wbg_cursor_free(a: number): void;
export function userstate_new(a: number, b: number, c: number): number;
export function userstate_identifier(a: number, b: number): void;
export function userstate_link(a: number): number;
export function userstate_seqNo(a: number): number;
export function userstate_branchNo(a: number): number;
export function __wbg_message_free(a: number): void;
export function __wbg_pskids_free(a: number): void;
export function pskids_new(): number;
export function pskids_add(a: number, b: number, c: number): void;
export function pskids_get_ids(a: number): number;
export function __wbg_publickeys_free(a: number): void;
export function publickeys_new(): number;
export function publickeys_add(a: number, b: number, c: number): void;
export function publickeys_get_pks(a: number): number;
export function message_default(): number;
export function message_new(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function message_get_identifier(a: number, b: number): void;
export function message_get_public_payload(a: number): number;
export function message_get_masked_payload(a: number): number;
export function nextmsgaddress_new(a: number, b: number, c: number): number;
export function userresponse_new(a: number, b: number, c: number): number;
export function userresponse_fromStrings(a: number, b: number, c: number, d: number, e: number): number;
export function userresponse_copy(a: number): number;
export function userresponse_link(a: number): number;
export function userresponse_seqLink(a: number): number;
export function userresponse_message(a: number): number;
export function __wbg_details_free(a: number): void;
export function details_get_metadata(a: number): number;
export function details_get_milestone(a: number): number;
export function __wbg_messagemetadata_free(a: number): void;
export function __wbg_get_messagemetadata_is_solid(a: number): number;
export function __wbg_set_messagemetadata_is_solid(a: number, b: number): void;
export function __wbg_get_messagemetadata_referenced_by_milestone_index(a: number, b: number): void;
export function __wbg_set_messagemetadata_referenced_by_milestone_index(a: number, b: number, c: number): void;
export function __wbg_get_messagemetadata_milestone_index(a: number, b: number): void;
export function __wbg_set_messagemetadata_milestone_index(a: number, b: number, c: number): void;
export function __wbg_get_messagemetadata_ledger_inclusion_state(a: number): number;
export function __wbg_set_messagemetadata_ledger_inclusion_state(a: number, b: number): void;
export function __wbg_get_messagemetadata_conflict_reason(a: number): number;
export function __wbg_set_messagemetadata_conflict_reason(a: number, b: number): void;
export function __wbg_get_messagemetadata_should_promote(a: number): number;
export function __wbg_set_messagemetadata_should_promote(a: number, b: number): void;
export function __wbg_get_messagemetadata_should_reattach(a: number): number;
export function __wbg_set_messagemetadata_should_reattach(a: number, b: number): void;
export function messagemetadata_message_id(a: number, b: number): void;
export function messagemetadata_get_parent_message_ids(a: number): number;
export function __wbg_milestoneresponse_free(a: number): void;
export function __wbg_get_milestoneresponse_index(a: number): number;
export function __wbg_set_milestoneresponse_index(a: number, b: number): void;
export function __wbg_get_milestoneresponse_timestamp(a: number, b: number): void;
export function __wbg_set_milestoneresponse_timestamp(a: number, b: number, c: number): void;
export function milestoneresponse_message_id(a: number, b: number): void;
export function __wbg_client_free(a: number): void;
export function client_new(a: number, b: number, c: number): number;
export function client_get_link_details(a: number, b: number): number;
export function __wbindgen_malloc(a: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number): number;
export const __wbindgen_export_2: WebAssembly.Table;
export function _dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h1adee366a495a62c(a: number, b: number, c: number): void;
export function __wbindgen_free(a: number, b: number): void;
export function __wbindgen_exn_store(a: number): void;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function wasm_bindgen__convert__closures__invoke2_mut__h3a4627a566036311(a: number, b: number, c: number, d: number): void;
